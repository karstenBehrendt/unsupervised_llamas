local image = require 'image'
local paths = require 'paths'
local t = require 'datasets/transforms'
local ffi = require 'ffi'

local M = {}
local LaneDataset = torch.class('resnet.LaneDataset', M)

function LaneDataset:__init(imageInfo, opt, split)
   self.imageInfo = imageInfo[split]
   self.opt = opt
   self.split = split
   self.dir = opt.data
   assert(paths.dirp(self.dir), 'directory does not exist: ' .. self.dir)
	print("lane inited")
end

function LaneDataset:get(i)
   local imgpath = ffi.string(self.imageInfo.imagePath[i]:data())
   local lbpath = ffi.string(self.imageInfo.labelPath[i]:data())
	print("loading img")
   local image = self:_loadImage(self.dir .. imgpath, 3, 'float')
   local label = self:_loadImage(self.dir .. lbpath, 1, 'byte')
	print(label:size())
	print("img loaded")
	local seglabel = self:segLabel(label)
	print("seglabel get")
   return {
      input = image,
      target = seglabel,
   }
end

function LaneDataset:segLabel(label)
	print("initializing seglabel")
	--print(label:size())
	local seglabel = torch.FloatTensor(5, label:size(2), label:size(3)):fill(0)
	print("creating seglabel")
	for i = 1, label:size(2) do
		for j = 1, label:size(3) do
			el = label[{1,i,j}]
			if el == 0 then
				seglabel[{1,i,j}] = 1
			else
				if el ~= 1 and el ~= 2 and el ~= 3 and el ~= 4 then
					print("error label:")
					print(el)
				end
				seglabel[{el+1,i,j}] = 1
			end
		end
	end
	print("seglabel created")
	return seglabel
end

function LaneDataset:_loadImage(path, channel, ttype)
	local ok, input = pcall(function()
		print(path)
		return image.load(path, channel, ttype)
	end)

	if not ok then
		print("load image failed!")
		return -1
	end
	return input
end

function LaneDataset:size()
	return self.imageInfo.imagePath:size(1)
end

function LaneDataset:preprocess()
	if self.split == 'train' then
	return t.Compose{
			t.ScaleWH(817, 297)
		}
	elseif self.split == 'val' then
		return t.Compose{
			t.ScaleWH(817, 297)
		}
	else
		error('invalid split: ' .. self.split)
	end
end

function LaneDataset:preprocessLabel()
	if self.split == 'train' then
	return t.Compose{
			t.ScaleWH(817, 297, 'simple')
		}
	elseif self.split == 'val' then
		return t.Compose{
			t.ScaleWH(817, 297, 'simple')
		}
	else
		error('invalid split: ' .. self.split)
	end
end

return M.LaneDataset
